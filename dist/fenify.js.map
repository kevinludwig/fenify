{"version":3,"sources":["webpack://fenify/webpack/universalModuleDefinition","webpack://fenify/webpack/bootstrap","webpack://fenify/./node_modules/chess.js/chess.js","webpack://fenify/./src/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Chess","fen","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","q","k","ATTACKS","RAYS","SHIFTS","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board","Array","kings","turn","castling","ep_square","half_moves","move_number","history","header","clear","keep_headers","update_setup","generate_fen","reset","load","tokens","split","position","validate_fen","valid","length","piece","charAt","indexOf","parseInt","color","put","type","toLowerCase","algebraic","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","sq","build_move","from","to","flags","promotion","move","captured","generate_moves","options","add_move","moves","rank","push","pieces","len","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","j","offset","castling_to","castling_from","attacked","legal_moves","make_move","king_attacked","undo_move","move_to_san","sloppy","output","disambiguator","ambiguities","same_rank","same_file","ambig_from","ambig_to","ambig_piece","file","get_disambiguator","in_check","in_checkmate","stripped_san","replace","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","pop","old","move_from_san","clean_move","matches","match","f","substring","make_pretty","ugly_move","clone","obj","dupe","san","trim","str","WHITE","BLACK","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","keys","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","reversed_history","move_string","Result","current_width","load_pgn","mask","header_regex","RegExp","header_string","exec","headers","header_obj","parse_pgn_header","ms","rav_regex","half_move","has_keys","arguments","ascii","move_obj","pretty_move","undo","remove","perft","depth","nodes","square_color","sq_0x88","move_history","_fenify","chess","map","ravs","rav","fenify","game","FEN"],"mappings":"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","file":"fenify.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fenify\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fenify\"] = factory();\n\telse\n\t\troot[\"fenify\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Copyright (c) 2020, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2018, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function(fen) {\n  var BLACK = 'b'\n  var WHITE = 'w'\n\n  var EMPTY = -1\n\n  var PAWN = 'p'\n  var KNIGHT = 'n'\n  var BISHOP = 'b'\n  var ROOK = 'r'\n  var QUEEN = 'q'\n  var KING = 'k'\n\n  var SYMBOLS = 'pnbrqkPNBRQK'\n\n  var DEFAULT_POSITION =\n    'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*']\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15]\n  }\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1]\n  }\n\n  // prettier-ignore\n  var ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n  ];\n\n  // prettier-ignore\n  var RAYS = [\n     17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n      0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n      0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n      0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n      0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n      1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n      0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n      0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n      0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n      0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n    -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n  ];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q'\n  }\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64\n  }\n\n  var RANK_1 = 7\n  var RANK_2 = 6\n  var RANK_3 = 5\n  var RANK_4 = 4\n  var RANK_5 = 3\n  var RANK_6 = 2\n  var RANK_7 = 1\n  var RANK_8 = 0\n\n  // prettier-ignore\n  var SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [\n      { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }\n    ],\n    b: [\n      { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }\n    ]\n  }\n\n  var board = new Array(128)\n  var kings = { w: EMPTY, b: EMPTY }\n  var turn = WHITE\n  var castling = { w: 0, b: 0 }\n  var ep_square = EMPTY\n  var half_moves = 0\n  var move_number = 1\n  var history = []\n  var header = {}\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION)\n  } else {\n    load(fen)\n  }\n\n  function clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    board = new Array(128)\n    kings = { w: EMPTY, b: EMPTY }\n    turn = WHITE\n    castling = { w: 0, b: 0 }\n    ep_square = EMPTY\n    half_moves = 0\n    move_number = 1\n    history = []\n    if (!keep_headers) header = {}\n    update_setup(generate_fen())\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION)\n  }\n\n  function load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    var tokens = fen.split(/\\s+/)\n    var position = tokens[0]\n    var square = 0\n\n    if (!validate_fen(fen).valid) {\n      return false\n    }\n\n    clear(keep_headers)\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK\n        put({ type: piece.toLowerCase(), color: color }, algebraic(square))\n        square++\n      }\n    }\n\n    turn = tokens[1]\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]]\n    half_moves = parseInt(tokens[4], 10)\n    move_number = parseInt(tokens[5], 10)\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square'\n    }\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/)\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] }\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] }\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] }\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] }\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] }\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] }\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/')\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] }\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0\n      var previous_was_number = false\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] }\n          }\n          sum_fields += parseInt(rows[i][k], 10)\n          previous_was_number = true\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] }\n          }\n          sum_fields += 1\n          previous_was_number = false\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] }\n      }\n    }\n\n    if (\n      (tokens[3][1] == '3' && tokens[1] == 'w') ||\n      (tokens[3][1] == '6' && tokens[1] == 'b')\n    ) {\n      return { valid: false, error_number: 11, error: errors[11] }\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] }\n  }\n\n  function generate_fen() {\n    var empty = 0\n    var fen = ''\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] == null) {\n        empty++\n      } else {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        var color = board[i].color\n        var piece = board[i].type\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    var cflags = ''\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K'\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q'\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k'\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q'\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-'\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1]\n      }\n    }\n    return header\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1'\n      header['FEN'] = fen\n    } else {\n      delete header['SetUp']\n      delete header['FEN']\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARES[square]]\n    return piece ? { type: piece.type, color: piece.color } : null\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false\n    }\n\n    var sq = SQUARES[square]\n\n    /* don't let the user place more than one king */\n    if (\n      piece.type == KING &&\n      !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\n    ) {\n      return false\n    }\n\n    board[sq] = { type: piece.type, color: piece.color }\n    if (piece.type === KING) {\n      kings[piece.color] = sq\n    }\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  function remove(square) {\n    var piece = get(square)\n    board[SQUARES[square]] = null\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY\n    }\n\n    update_setup(generate_fen())\n\n    return piece\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    }\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION\n      move.promotion = promotion\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN\n    }\n    return move\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (\n        board[from].type === PAWN &&\n        (rank(to) === RANK_8 || rank(to) === RANK_1)\n      ) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]))\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags))\n      }\n    }\n\n    var moves = []\n    var us = turn\n    var them = swap_color(us)\n    var second_rank = { b: RANK_7, w: RANK_2 }\n\n    var first_sq = SQUARES.a8\n    var last_sq = SQUARES.h1\n    var single_square = false\n\n    /* do we want legal moves? */\n    var legal =\n      typeof options !== 'undefined' && 'legal' in options\n        ? options.legal\n        : true\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square]\n        single_square = true\n      } else {\n        /* invalid square */\n        return []\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece == null || piece.color !== us) {\n        continue\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0]\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL)\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1]\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN)\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j]\n          if (square & 0x88) continue\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE)\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j]\n          var square = i\n\n          while (true) {\n            square += offset\n            if (square & 0x88) break\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL)\n            } else {\n              if (board[square].color === us) break\n              add_move(board, moves, i, square, BITS.CAPTURE)\n              break\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (!single_square || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us]\n        var castling_to = castling_from + 2\n\n        if (\n          board[castling_from + 1] == null &&\n          board[castling_to] == null &&\n          !attacked(them, kings[us]) &&\n          !attacked(them, castling_from + 1) &&\n          !attacked(them, castling_to)\n        ) {\n          add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us]\n        var castling_to = castling_from - 2\n\n        if (\n          board[castling_from - 1] == null &&\n          board[castling_from - 2] == null &&\n          board[castling_from - 3] == null &&\n          !attacked(them, kings[us]) &&\n          !attacked(them, castling_from - 1) &&\n          !attacked(them, castling_to)\n        ) {\n          add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = []\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i])\n      }\n      undo_move()\n    }\n\n    return legal_moves\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n    var output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy)\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    make_move(move)\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    undo_move()\n\n    return output\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue\n\n      var piece = board[i]\n      var difference = i - square\n      var index = difference + 119\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        var offset = RAYS[index]\n        var j = i + offset\n\n        var blocked = false\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color])\n  }\n\n  function in_check() {\n    return king_attacked(turn)\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0\n  }\n\n  function insufficient_material() {\n    var pieces = {}\n    var bishops = []\n    var num_pieces = 0\n    var sq_color = 0\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color)\n        }\n        num_pieces++\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true\n    } else if (\n      /* k vs. kn .... or .... k vs. kb */\n      num_pieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0\n      var len = bishops.length\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = []\n    var positions = {}\n    var repetition = false\n\n    while (true) {\n      var move = undo_move()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen()\n        .split(' ')\n        .slice(0, 4)\n        .join(' ')\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      if (!moves.length) {\n        break\n      }\n      make_move(moves.pop())\n    }\n\n    return repetition\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    })\n  }\n\n  function make_move(move) {\n    var us = turn\n    var them = swap_color(us)\n    push(move)\n\n    board[move.to] = board[move.from]\n    board[move.from] = null\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null\n      } else {\n        board[move.to + 16] = null\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us }\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1\n        var castling_from = move.to + 1\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1\n        var castling_from = move.to - 2\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      }\n\n      /* turn off castling */\n      castling[us] = ''\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          castling[us] & ROOKS[us][i].flag\n        ) {\n          castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          castling[them] & ROOKS[them][i].flag\n        ) {\n          castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16\n      } else {\n        ep_square = move.to + 16\n      }\n    } else {\n      ep_square = EMPTY\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0\n    } else {\n      half_moves++\n    }\n\n    if (turn === BLACK) {\n      move_number++\n    }\n    turn = swap_color(turn)\n  }\n\n  function undo_move() {\n    var old = history.pop()\n    if (old == null) {\n      return null\n    }\n\n    var move = old.move\n    kings = old.kings\n    turn = old.turn\n    castling = old.castling\n    ep_square = old.ep_square\n    half_moves = old.half_moves\n    move_number = old.move_number\n\n    var us = turn\n    var them = swap_color(turn)\n\n    board[move.from] = board[move.to]\n    board[move.from].type = move.piece // to undo any promotions\n    board[move.to] = null\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them }\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index\n      if (us === BLACK) {\n        index = move.to - 16\n      } else {\n        index = move.to + 16\n      }\n      board[index] = { type: PAWN, color: them }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1\n        castling_from = move.to - 1\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2\n        castling_from = move.to + 1\n      }\n\n      board[castling_to] = board[castling_from]\n      board[castling_from] = null\n    }\n\n    return move\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({ legal: !sloppy })\n\n    var from = move.from\n    var to = move.to\n    var piece = move.piece\n\n    var ambiguities = 0\n    var same_rank = 0\n    var same_file = 0\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from\n      var ambig_to = moves[i].to\n      var ambig_piece = moves[i].piece\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from)\n      } else if (same_file > 0) {\n        /* if the moving piece rests on the same file, use the rank symbol as the\n         * disambiguator\n         */\n        return algebraic(from).charAt(1)\n      } else {\n        /* else use the file symbol */\n        return algebraic(from).charAt(0)\n      }\n    }\n\n    return ''\n  }\n\n  function ascii() {\n    var s = '   +------------------------+\\n'\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      /* empty piece */\n      if (board[i] == null) {\n        s += ' . '\n      } else {\n        var piece = board[i].type\n        var color = board[i].color\n        var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h\\n'\n\n    return s\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move)\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(\n        /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      )\n      if (matches) {\n        var piece = matches[1]\n        var from = matches[2]\n        var to = matches[3]\n        var promotion = matches[4]\n      }\n    }\n\n    var moves = generate_moves()\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if (\n        clean_move === stripped_san(move_to_san(moves[i])) ||\n        (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))\n      ) {\n        return moves[i]\n      } else {\n        if (\n          matches &&\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          SQUARES[from] == moves[i].from &&\n          SQUARES[to] == moves[i].to &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        }\n      }\n    }\n\n    return null\n  }\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4\n  }\n\n  function file(i) {\n    return i & 15\n  }\n\n  function algebraic(i) {\n    var f = file(i),\n      r = rank(i)\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move)\n    move.san = move_to_san(move, false)\n    move.to = algebraic(move.to)\n    move.from = algebraic(move.from)\n\n    var flags = ''\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag]\n      }\n    }\n    move.flags = flags\n\n    return move\n  }\n\n  function clone(obj) {\n    var dupe = obj instanceof Array ? [] : {}\n\n    for (var property in obj) {\n      if (typeof property === 'object') {\n        dupe[property] = clone(obj[property])\n      } else {\n        dupe[property] = obj[property]\n      }\n    }\n\n    return dupe\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '')\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({ legal: false })\n    var nodes = 0\n    var color = turn\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1)\n          nodes += child_nodes\n        } else {\n          nodes++\n        }\n      }\n      undo_move()\n    }\n\n    return nodes\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: (function() {\n      /* from the ECMA-262 spec (section 12.6.4):\n       * \"The mechanics of enumerating the properties ... is\n       * implementation dependent\"\n       * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n       * ordered correctly\n       */\n      var keys = []\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (i & 0x88) {\n          i += 7\n          continue\n        }\n        keys.push(algebraic(i))\n      }\n      return keys\n    })(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function(fen) {\n      return load(fen)\n    },\n\n    reset: function() {\n      return reset()\n    },\n\n    moves: function(options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options)\n      var moves = []\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (\n          typeof options !== 'undefined' &&\n          'verbose' in options &&\n          options.verbose\n        ) {\n          moves.push(make_pretty(ugly_moves[i]))\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false))\n        }\n      }\n\n      return moves\n    },\n\n    in_check: function() {\n      return in_check()\n    },\n\n    in_checkmate: function() {\n      return in_checkmate()\n    },\n\n    in_stalemate: function() {\n      return in_stalemate()\n    },\n\n    in_draw: function() {\n      return (\n        half_moves >= 100 ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    insufficient_material: function() {\n      return insufficient_material()\n    },\n\n    in_threefold_repetition: function() {\n      return in_threefold_repetition()\n    },\n\n    game_over: function() {\n      return (\n        half_moves >= 100 ||\n        in_checkmate() ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    validate_fen: function(fen) {\n      return validate_fen(fen)\n    },\n\n    fen: function() {\n      return generate_fen()\n    },\n\n    board: function() {\n      var output = [],\n        row = []\n\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (board[i] == null) {\n          row.push(null)\n        } else {\n          row.push({ type: board[i].type, color: board[i].color })\n        }\n        if ((i + 1) & 0x88) {\n          output.push(row)\n          row = []\n          i += 8\n        }\n      }\n\n      return output\n    },\n\n    pgn: function(options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\n'\n      var max_width =\n        typeof options === 'object' && typeof options.max_width === 'number'\n          ? options.max_width\n          : 0\n      var result = []\n      var header_exists = false\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\n        header_exists = true\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline)\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = []\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      var moves = []\n      var move_string = ''\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop()\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...'\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string)\n          }\n          move_string = move_number + '.'\n        }\n\n        move_string = move_string + ' ' + move_to_san(move, false)\n        make_move(move)\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(move_string)\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result)\n      }\n\n      /* history should be back to what is was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ')\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0\n      for (var i = 0; i < moves.length; i++) {\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop()\n          }\n\n          result.push(newline)\n          current_width = 0\n        } else if (i !== 0) {\n          result.push(' ')\n          current_width++\n        }\n        result.push(moves[i])\n        current_width += moves[i].length\n      }\n\n      return result.join('')\n    },\n\n    load_pgn: function(pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\')\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true\n        }\n        return false\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char =\n          typeof options === 'object' &&\n          typeof options.newline_char === 'string'\n            ? options.newline_char\n            : '\\r?\\n'\n        var header_obj = {}\n        var headers = header.split(new RegExp(mask(newline_char)))\n        var key = ''\n        var value = ''\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1')\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1')\n          if (trim(key).length > 0) {\n            header_obj[key] = value\n          }\n        }\n\n        return header_obj\n      }\n\n      var newline_char =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\r?\\n'\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\n      var header_regex = new RegExp(\n        '^(\\\\[((?:' +\n          mask(newline_char) +\n          ')|.)*\\\\])' +\n          '(?:' +\n          mask(newline_char) +\n          '){2}'\n      )\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn)\n        ? header_regex.exec(pgn)[1]\n        : ''\n\n      // Put the board in the starting position\n      reset()\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options)\n      for (var key in headers) {\n        set_header([key, headers[key]])\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n       * [FEN position] */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers && load(headers['FEN'], true))) {\n          // second argument to load: don't clear the headers\n          return false\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn\n        .replace(header_string, '')\n        .replace(new RegExp(mask(newline_char), 'g'), ' ')\n\n      /* delete comments */\n      ms = ms.replace(/(\\{[^}]+\\})+?/g, '')\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '')\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '')\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '')\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/))\n\n      /* delete empty entries */\n      moves = moves\n        .join(',')\n        .replace(/,,+/g, ',')\n        .split(',')\n      var move = ''\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        move = move_from_san(moves[half_move], sloppy)\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false\n        } else {\n          make_move(move)\n        }\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1]\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move])\n        }\n      } else {\n        move = move_from_san(move, sloppy)\n        if (move == null) {\n          return false\n        } else {\n          make_move(move)\n        }\n      }\n      return true\n    },\n\n    header: function() {\n      return set_header(arguments)\n    },\n\n    ascii: function() {\n      return ascii()\n    },\n\n    turn: function() {\n      return turn\n    },\n\n    move: function(move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      var move_obj = null\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy)\n      } else if (typeof move === 'object') {\n        var moves = generate_moves()\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (\n            move.from === algebraic(moves[i].from) &&\n            move.to === algebraic(moves[i].to) &&\n            (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)\n          ) {\n            move_obj = moves[i]\n            break\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj)\n\n      make_move(move_obj)\n\n      return pretty_move\n    },\n\n    undo: function() {\n      var move = undo_move()\n      return move ? make_pretty(move) : null\n    },\n\n    clear: function() {\n      return clear()\n    },\n\n    put: function(piece, square) {\n      return put(piece, square)\n    },\n\n    get: function(square) {\n      return get(square)\n    },\n\n    remove: function(square) {\n      return remove(square)\n    },\n\n    perft: function(depth) {\n      return perft(depth)\n    },\n\n    square_color: function(square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square]\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\n      }\n\n      return null\n    },\n\n    history: function(options) {\n      var reversed_history = []\n      var move_history = []\n      var verbose =\n        typeof options !== 'undefined' &&\n        'verbose' in options &&\n        options.verbose\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop()\n        if (verbose) {\n          move_history.push(make_pretty(move))\n        } else {\n          move_history.push(move_to_san(move))\n        }\n        make_move(move)\n      }\n\n      return move_history\n    }\n  }\n}\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (typeof exports !== 'undefined') exports.Chess = Chess\n/* export Chess object for any RequireJS compatible environment */\nif (typeof define !== 'undefined')\n  define(function() {\n    return Chess\n  })\n","import Chess from 'chess.js';\n\nconst _fenify = (fen, moves) => {\n    const chess = new Chess(fen);\n\n    return moves.map(m => {\n        chess.move(m.move);\n        const fen = chess.fen();\n        return {\n            ...m,\n            fen,\n            ravs: m.ravs && m.ravs.map(rav => ({\n                ...rav, \n                moves: _fenify(fen, rav.moves)\n            }))\n        };\n    });\n};\n\nexport const fenify = (game) => {\n    const fen = game.headers.FEN || 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n    return {\n        ...game,\n        moves: _fenify(fen, game.moves)\n    };\n};\n\nexport default fenify;\n"],"sourceRoot":""}